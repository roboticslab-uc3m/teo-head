// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "humanoid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3HumanoidStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HumanoidStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HumanoidCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HumanoidCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HumanoidParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HumanoidParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3BaseHumanoidStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3BaseHumanoidStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3BaseHumanoidCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3BaseHumanoidCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3BaseHumanoidParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3BaseHumanoidParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_humanoid_2eproto() {
  protobuf_AddDesc_humanoid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "humanoid.proto");
  GOOGLE_CHECK(file != NULL);
  M3HumanoidStatus_descriptor_ = file->message_type(0);
  static const int M3HumanoidStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, right_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, left_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, right_eye_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, left_eye_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, right_eye_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, left_eye_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, motor_enabled_),
  };
  M3HumanoidStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HumanoidStatus_descriptor_,
      M3HumanoidStatus::default_instance_,
      M3HumanoidStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HumanoidStatus));
  M3HumanoidCommand_descriptor_ = file->message_type(1);
  static const int M3HumanoidCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, right_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, left_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, enable_motor_),
  };
  M3HumanoidCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HumanoidCommand_descriptor_,
      M3HumanoidCommand::default_instance_,
      M3HumanoidCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HumanoidCommand));
  M3HumanoidParam_descriptor_ = file->message_type(2);
  static const int M3HumanoidParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, right_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, left_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, head_),
  };
  M3HumanoidParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HumanoidParam_descriptor_,
      M3HumanoidParam::default_instance_,
      M3HumanoidParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HumanoidParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HumanoidParam));
  M3BaseHumanoidStatus_descriptor_ = file->message_type(3);
  static const int M3BaseHumanoidStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, torquedot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, thetadot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, thetadotdot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, completed_spline_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, end_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, end_twist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, pwm_cmd_),
  };
  M3BaseHumanoidStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3BaseHumanoidStatus_descriptor_,
      M3BaseHumanoidStatus::default_instance_,
      M3BaseHumanoidStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3BaseHumanoidStatus));
  M3BaseHumanoidCommand_descriptor_ = file->message_type(4);
  static const int M3BaseHumanoidCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, tq_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, q_stiffness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, ctrl_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, q_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, vias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, qdot_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, q_slew_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, pwm_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, smoothing_mode_),
  };
  M3BaseHumanoidCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3BaseHumanoidCommand_descriptor_,
      M3BaseHumanoidCommand::default_instance_,
      M3BaseHumanoidCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3BaseHumanoidCommand));
  M3BaseHumanoidParam_descriptor_ = file->message_type(5);
  static const int M3BaseHumanoidParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, payload_mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, payload_com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, payload_inertia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, use_velocities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, use_accelerations_),
  };
  M3BaseHumanoidParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3BaseHumanoidParam_descriptor_,
      M3BaseHumanoidParam::default_instance_,
      M3BaseHumanoidParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseHumanoidParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3BaseHumanoidParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_humanoid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HumanoidStatus_descriptor_, &M3HumanoidStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HumanoidCommand_descriptor_, &M3HumanoidCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HumanoidParam_descriptor_, &M3HumanoidParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3BaseHumanoidStatus_descriptor_, &M3BaseHumanoidStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3BaseHumanoidCommand_descriptor_, &M3BaseHumanoidCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3BaseHumanoidParam_descriptor_, &M3BaseHumanoidParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_humanoid_2eproto() {
  delete M3HumanoidStatus::default_instance_;
  delete M3HumanoidStatus_reflection_;
  delete M3HumanoidCommand::default_instance_;
  delete M3HumanoidCommand_reflection_;
  delete M3HumanoidParam::default_instance_;
  delete M3HumanoidParam_reflection_;
  delete M3BaseHumanoidStatus::default_instance_;
  delete M3BaseHumanoidStatus_reflection_;
  delete M3BaseHumanoidCommand::default_instance_;
  delete M3BaseHumanoidCommand_reflection_;
  delete M3BaseHumanoidParam::default_instance_;
  delete M3BaseHumanoidParam_reflection_;
}

void protobuf_AddDesc_humanoid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::protobuf_AddDesc_joint_5farray_5fmode_2eproto();
  ::protobuf_AddDesc_trajectory_2eproto();
  ::protobuf_AddDesc_smoothing_5fmode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016humanoid.proto\032\024component_base.proto\032\026"
    "joint_array_mode.proto\032\020trajectory.proto"
    "\032\024smoothing_mode.proto\"\276\002\n\020M3HumanoidSta"
    "tus\022\033\n\004base\030\001 \001(\0132\r.M3BaseStatus\022(\n\trigh"
    "t_arm\030\002 \001(\0132\025.M3BaseHumanoidStatus\022\'\n\010le"
    "ft_arm\030\003 \001(\0132\025.M3BaseHumanoidStatus\022$\n\005t"
    "orso\030\004 \001(\0132\025.M3BaseHumanoidStatus\022#\n\004hea"
    "d\030\005 \001(\0132\025.M3BaseHumanoidStatus\022\025\n\rright_"
    "eye_rot\030\006 \003(\001\022\024\n\014left_eye_rot\030\007 \003(\001\022\025\n\rr"
    "ight_eye_pos\030\010 \003(\001\022\024\n\014left_eye_pos\030\t \003(\001"
    "\022\025\n\rmotor_enabled\030\n \001(\010\"\313\001\n\021M3HumanoidCo"
    "mmand\022)\n\tright_arm\030\001 \001(\0132\026.M3BaseHumanoi"
    "dCommand\022(\n\010left_arm\030\002 \001(\0132\026.M3BaseHuman"
    "oidCommand\022%\n\005torso\030\003 \001(\0132\026.M3BaseHumano"
    "idCommand\022$\n\004head\030\004 \001(\0132\026.M3BaseHumanoid"
    "Command\022\024\n\014enable_motor\030\005 \001(\010\"\253\001\n\017M3Huma"
    "noidParam\022\'\n\tright_arm\030\001 \001(\0132\024.M3BaseHum"
    "anoidParam\022&\n\010left_arm\030\002 \001(\0132\024.M3BaseHum"
    "anoidParam\022#\n\005torso\030\003 \001(\0132\024.M3BaseHumano"
    "idParam\022\"\n\004head\030\004 \001(\0132\024.M3BaseHumanoidPa"
    "ram\"\351\001\n\024M3BaseHumanoidStatus\022\016\n\006torque\030\001"
    " \003(\001\022\021\n\ttorquedot\030\002 \003(\001\022\r\n\005theta\030\004 \003(\001\022\020"
    "\n\010thetadot\030\005 \003(\001\022\023\n\013thetadotdot\030\006 \003(\001\022\034\n"
    "\024completed_spline_idx\030\007 \001(\005\022\017\n\007end_pos\030\010"
    " \003(\001\022\017\n\007end_rot\030\t \003(\001\022\t\n\001J\030\n \003(\001\022\t\n\001G\030\013 "
    "\003(\001\022\021\n\tend_twist\030\014 \003(\001\022\017\n\007pwm_cmd\030\r \003(\005\""
    "\375\001\n\025M3BaseHumanoidCommand\022\022\n\ntq_desired\030"
    "\001 \003(\001\022\023\n\013q_stiffness\030\002 \003(\001\022$\n\tctrl_mode\030"
    "\003 \003(\0162\021.JOINT_ARRAY_MODE\022\021\n\tq_desired\030\004 "
    "\003(\001\022\031\n\004vias\030\005 \003(\0132\013.M3JointVia\022\024\n\014qdot_d"
    "esired\030\006 \003(\001\022\023\n\013q_slew_rate\030\007 \003(\001\022\023\n\013pwm"
    "_desired\030\010 \003(\001\022\'\n\016smoothing_mode\030\t \003(\0162\017"
    ".SMOOTHING_MODE\"\214\001\n\023M3BaseHumanoidParam\022"
    "\024\n\014payload_mass\030\001 \001(\001\022\023\n\013payload_com\030\002 \003"
    "(\001\022\027\n\017payload_inertia\030\003 \003(\001\022\026\n\016use_veloc"
    "ities\030\004 \001(\010\022\031\n\021use_accelerations\030\005 \001(\010B\002"
    "H\001", 1442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "humanoid.proto", &protobuf_RegisterTypes);
  M3HumanoidStatus::default_instance_ = new M3HumanoidStatus();
  M3HumanoidCommand::default_instance_ = new M3HumanoidCommand();
  M3HumanoidParam::default_instance_ = new M3HumanoidParam();
  M3BaseHumanoidStatus::default_instance_ = new M3BaseHumanoidStatus();
  M3BaseHumanoidCommand::default_instance_ = new M3BaseHumanoidCommand();
  M3BaseHumanoidParam::default_instance_ = new M3BaseHumanoidParam();
  M3HumanoidStatus::default_instance_->InitAsDefaultInstance();
  M3HumanoidCommand::default_instance_->InitAsDefaultInstance();
  M3HumanoidParam::default_instance_->InitAsDefaultInstance();
  M3BaseHumanoidStatus::default_instance_->InitAsDefaultInstance();
  M3BaseHumanoidCommand::default_instance_->InitAsDefaultInstance();
  M3BaseHumanoidParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_humanoid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_humanoid_2eproto {
  StaticDescriptorInitializer_humanoid_2eproto() {
    protobuf_AddDesc_humanoid_2eproto();
  }
} static_descriptor_initializer_humanoid_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3HumanoidStatus::kBaseFieldNumber;
const int M3HumanoidStatus::kRightArmFieldNumber;
const int M3HumanoidStatus::kLeftArmFieldNumber;
const int M3HumanoidStatus::kTorsoFieldNumber;
const int M3HumanoidStatus::kHeadFieldNumber;
const int M3HumanoidStatus::kRightEyeRotFieldNumber;
const int M3HumanoidStatus::kLeftEyeRotFieldNumber;
const int M3HumanoidStatus::kRightEyePosFieldNumber;
const int M3HumanoidStatus::kLeftEyePosFieldNumber;
const int M3HumanoidStatus::kMotorEnabledFieldNumber;
#endif  // !_MSC_VER

M3HumanoidStatus::M3HumanoidStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HumanoidStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  right_arm_ = const_cast< ::M3BaseHumanoidStatus*>(&::M3BaseHumanoidStatus::default_instance());
  left_arm_ = const_cast< ::M3BaseHumanoidStatus*>(&::M3BaseHumanoidStatus::default_instance());
  torso_ = const_cast< ::M3BaseHumanoidStatus*>(&::M3BaseHumanoidStatus::default_instance());
  head_ = const_cast< ::M3BaseHumanoidStatus*>(&::M3BaseHumanoidStatus::default_instance());
}

M3HumanoidStatus::M3HumanoidStatus(const M3HumanoidStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HumanoidStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  right_arm_ = NULL;
  left_arm_ = NULL;
  torso_ = NULL;
  head_ = NULL;
  motor_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HumanoidStatus::~M3HumanoidStatus() {
  SharedDtor();
}

void M3HumanoidStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete right_arm_;
    delete left_arm_;
    delete torso_;
    delete head_;
  }
}

void M3HumanoidStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HumanoidStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HumanoidStatus_descriptor_;
}

const M3HumanoidStatus& M3HumanoidStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3HumanoidStatus* M3HumanoidStatus::default_instance_ = NULL;

M3HumanoidStatus* M3HumanoidStatus::New() const {
  return new M3HumanoidStatus;
}

void M3HumanoidStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_right_arm()) {
      if (right_arm_ != NULL) right_arm_->::M3BaseHumanoidStatus::Clear();
    }
    if (has_left_arm()) {
      if (left_arm_ != NULL) left_arm_->::M3BaseHumanoidStatus::Clear();
    }
    if (has_torso()) {
      if (torso_ != NULL) torso_->::M3BaseHumanoidStatus::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::M3BaseHumanoidStatus::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    motor_enabled_ = false;
  }
  right_eye_rot_.Clear();
  left_eye_rot_.Clear();
  right_eye_pos_.Clear();
  left_eye_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HumanoidStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_right_arm;
        break;
      }
      
      // optional .M3BaseHumanoidStatus right_arm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_left_arm;
        break;
      }
      
      // optional .M3BaseHumanoidStatus left_arm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_torso;
        break;
      }
      
      // optional .M3BaseHumanoidStatus torso = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }
      
      // optional .M3BaseHumanoidStatus head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_right_eye_rot;
        break;
      }
      
      // repeated double right_eye_rot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_right_eye_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_right_eye_rot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_right_eye_rot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_right_eye_rot;
        if (input->ExpectTag(57)) goto parse_left_eye_rot;
        break;
      }
      
      // repeated double left_eye_rot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_eye_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_left_eye_rot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_left_eye_rot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_left_eye_rot;
        if (input->ExpectTag(65)) goto parse_right_eye_pos;
        break;
      }
      
      // repeated double right_eye_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_right_eye_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_right_eye_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_right_eye_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_right_eye_pos;
        if (input->ExpectTag(73)) goto parse_left_eye_pos;
        break;
      }
      
      // repeated double left_eye_pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_eye_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_left_eye_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_left_eye_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_left_eye_pos;
        if (input->ExpectTag(80)) goto parse_motor_enabled;
        break;
      }
      
      // optional bool motor_enabled = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motor_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motor_enabled_)));
          set_has_motor_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HumanoidStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3BaseHumanoidStatus right_arm = 2;
  if (has_right_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right_arm(), output);
  }
  
  // optional .M3BaseHumanoidStatus left_arm = 3;
  if (has_left_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_arm(), output);
  }
  
  // optional .M3BaseHumanoidStatus torso = 4;
  if (has_torso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->torso(), output);
  }
  
  // optional .M3BaseHumanoidStatus head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->head(), output);
  }
  
  // repeated double right_eye_rot = 6;
  for (int i = 0; i < this->right_eye_rot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->right_eye_rot(i), output);
  }
  
  // repeated double left_eye_rot = 7;
  for (int i = 0; i < this->left_eye_rot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->left_eye_rot(i), output);
  }
  
  // repeated double right_eye_pos = 8;
  for (int i = 0; i < this->right_eye_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->right_eye_pos(i), output);
  }
  
  // repeated double left_eye_pos = 9;
  for (int i = 0; i < this->left_eye_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->left_eye_pos(i), output);
  }
  
  // optional bool motor_enabled = 10;
  if (has_motor_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->motor_enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HumanoidStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3BaseHumanoidStatus right_arm = 2;
  if (has_right_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right_arm(), target);
  }
  
  // optional .M3BaseHumanoidStatus left_arm = 3;
  if (has_left_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left_arm(), target);
  }
  
  // optional .M3BaseHumanoidStatus torso = 4;
  if (has_torso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->torso(), target);
  }
  
  // optional .M3BaseHumanoidStatus head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->head(), target);
  }
  
  // repeated double right_eye_rot = 6;
  for (int i = 0; i < this->right_eye_rot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->right_eye_rot(i), target);
  }
  
  // repeated double left_eye_rot = 7;
  for (int i = 0; i < this->left_eye_rot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->left_eye_rot(i), target);
  }
  
  // repeated double right_eye_pos = 8;
  for (int i = 0; i < this->right_eye_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->right_eye_pos(i), target);
  }
  
  // repeated double left_eye_pos = 9;
  for (int i = 0; i < this->left_eye_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->left_eye_pos(i), target);
  }
  
  // optional bool motor_enabled = 10;
  if (has_motor_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->motor_enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HumanoidStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3BaseHumanoidStatus right_arm = 2;
    if (has_right_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_arm());
    }
    
    // optional .M3BaseHumanoidStatus left_arm = 3;
    if (has_left_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_arm());
    }
    
    // optional .M3BaseHumanoidStatus torso = 4;
    if (has_torso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torso());
    }
    
    // optional .M3BaseHumanoidStatus head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool motor_enabled = 10;
    if (has_motor_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated double right_eye_rot = 6;
  {
    int data_size = 0;
    data_size = 8 * this->right_eye_rot_size();
    total_size += 1 * this->right_eye_rot_size() + data_size;
  }
  
  // repeated double left_eye_rot = 7;
  {
    int data_size = 0;
    data_size = 8 * this->left_eye_rot_size();
    total_size += 1 * this->left_eye_rot_size() + data_size;
  }
  
  // repeated double right_eye_pos = 8;
  {
    int data_size = 0;
    data_size = 8 * this->right_eye_pos_size();
    total_size += 1 * this->right_eye_pos_size() + data_size;
  }
  
  // repeated double left_eye_pos = 9;
  {
    int data_size = 0;
    data_size = 8 * this->left_eye_pos_size();
    total_size += 1 * this->left_eye_pos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HumanoidStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HumanoidStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HumanoidStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HumanoidStatus::MergeFrom(const M3HumanoidStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  right_eye_rot_.MergeFrom(from.right_eye_rot_);
  left_eye_rot_.MergeFrom(from.left_eye_rot_);
  right_eye_pos_.MergeFrom(from.right_eye_pos_);
  left_eye_pos_.MergeFrom(from.left_eye_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_right_arm()) {
      mutable_right_arm()->::M3BaseHumanoidStatus::MergeFrom(from.right_arm());
    }
    if (from.has_left_arm()) {
      mutable_left_arm()->::M3BaseHumanoidStatus::MergeFrom(from.left_arm());
    }
    if (from.has_torso()) {
      mutable_torso()->::M3BaseHumanoidStatus::MergeFrom(from.torso());
    }
    if (from.has_head()) {
      mutable_head()->::M3BaseHumanoidStatus::MergeFrom(from.head());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_motor_enabled()) {
      set_motor_enabled(from.motor_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HumanoidStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HumanoidStatus::CopyFrom(const M3HumanoidStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HumanoidStatus::IsInitialized() const {
  
  return true;
}

void M3HumanoidStatus::Swap(M3HumanoidStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(right_arm_, other->right_arm_);
    std::swap(left_arm_, other->left_arm_);
    std::swap(torso_, other->torso_);
    std::swap(head_, other->head_);
    right_eye_rot_.Swap(&other->right_eye_rot_);
    left_eye_rot_.Swap(&other->left_eye_rot_);
    right_eye_pos_.Swap(&other->right_eye_pos_);
    left_eye_pos_.Swap(&other->left_eye_pos_);
    std::swap(motor_enabled_, other->motor_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HumanoidStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HumanoidStatus_descriptor_;
  metadata.reflection = M3HumanoidStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HumanoidCommand::kRightArmFieldNumber;
const int M3HumanoidCommand::kLeftArmFieldNumber;
const int M3HumanoidCommand::kTorsoFieldNumber;
const int M3HumanoidCommand::kHeadFieldNumber;
const int M3HumanoidCommand::kEnableMotorFieldNumber;
#endif  // !_MSC_VER

M3HumanoidCommand::M3HumanoidCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HumanoidCommand::InitAsDefaultInstance() {
  right_arm_ = const_cast< ::M3BaseHumanoidCommand*>(&::M3BaseHumanoidCommand::default_instance());
  left_arm_ = const_cast< ::M3BaseHumanoidCommand*>(&::M3BaseHumanoidCommand::default_instance());
  torso_ = const_cast< ::M3BaseHumanoidCommand*>(&::M3BaseHumanoidCommand::default_instance());
  head_ = const_cast< ::M3BaseHumanoidCommand*>(&::M3BaseHumanoidCommand::default_instance());
}

M3HumanoidCommand::M3HumanoidCommand(const M3HumanoidCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HumanoidCommand::SharedCtor() {
  _cached_size_ = 0;
  right_arm_ = NULL;
  left_arm_ = NULL;
  torso_ = NULL;
  head_ = NULL;
  enable_motor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HumanoidCommand::~M3HumanoidCommand() {
  SharedDtor();
}

void M3HumanoidCommand::SharedDtor() {
  if (this != default_instance_) {
    delete right_arm_;
    delete left_arm_;
    delete torso_;
    delete head_;
  }
}

void M3HumanoidCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HumanoidCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HumanoidCommand_descriptor_;
}

const M3HumanoidCommand& M3HumanoidCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3HumanoidCommand* M3HumanoidCommand::default_instance_ = NULL;

M3HumanoidCommand* M3HumanoidCommand::New() const {
  return new M3HumanoidCommand;
}

void M3HumanoidCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_right_arm()) {
      if (right_arm_ != NULL) right_arm_->::M3BaseHumanoidCommand::Clear();
    }
    if (has_left_arm()) {
      if (left_arm_ != NULL) left_arm_->::M3BaseHumanoidCommand::Clear();
    }
    if (has_torso()) {
      if (torso_ != NULL) torso_->::M3BaseHumanoidCommand::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::M3BaseHumanoidCommand::Clear();
    }
    enable_motor_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HumanoidCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseHumanoidCommand right_arm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_arm;
        break;
      }
      
      // optional .M3BaseHumanoidCommand left_arm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_torso;
        break;
      }
      
      // optional .M3BaseHumanoidCommand torso = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }
      
      // optional .M3BaseHumanoidCommand head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enable_motor;
        break;
      }
      
      // optional bool enable_motor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_motor_)));
          set_has_enable_motor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HumanoidCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseHumanoidCommand right_arm = 1;
  if (has_right_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->right_arm(), output);
  }
  
  // optional .M3BaseHumanoidCommand left_arm = 2;
  if (has_left_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_arm(), output);
  }
  
  // optional .M3BaseHumanoidCommand torso = 3;
  if (has_torso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->torso(), output);
  }
  
  // optional .M3BaseHumanoidCommand head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->head(), output);
  }
  
  // optional bool enable_motor = 5;
  if (has_enable_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_motor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HumanoidCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseHumanoidCommand right_arm = 1;
  if (has_right_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->right_arm(), target);
  }
  
  // optional .M3BaseHumanoidCommand left_arm = 2;
  if (has_left_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_arm(), target);
  }
  
  // optional .M3BaseHumanoidCommand torso = 3;
  if (has_torso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->torso(), target);
  }
  
  // optional .M3BaseHumanoidCommand head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->head(), target);
  }
  
  // optional bool enable_motor = 5;
  if (has_enable_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_motor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HumanoidCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseHumanoidCommand right_arm = 1;
    if (has_right_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_arm());
    }
    
    // optional .M3BaseHumanoidCommand left_arm = 2;
    if (has_left_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_arm());
    }
    
    // optional .M3BaseHumanoidCommand torso = 3;
    if (has_torso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torso());
    }
    
    // optional .M3BaseHumanoidCommand head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional bool enable_motor = 5;
    if (has_enable_motor()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HumanoidCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HumanoidCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HumanoidCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HumanoidCommand::MergeFrom(const M3HumanoidCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_right_arm()) {
      mutable_right_arm()->::M3BaseHumanoidCommand::MergeFrom(from.right_arm());
    }
    if (from.has_left_arm()) {
      mutable_left_arm()->::M3BaseHumanoidCommand::MergeFrom(from.left_arm());
    }
    if (from.has_torso()) {
      mutable_torso()->::M3BaseHumanoidCommand::MergeFrom(from.torso());
    }
    if (from.has_head()) {
      mutable_head()->::M3BaseHumanoidCommand::MergeFrom(from.head());
    }
    if (from.has_enable_motor()) {
      set_enable_motor(from.enable_motor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HumanoidCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HumanoidCommand::CopyFrom(const M3HumanoidCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HumanoidCommand::IsInitialized() const {
  
  return true;
}

void M3HumanoidCommand::Swap(M3HumanoidCommand* other) {
  if (other != this) {
    std::swap(right_arm_, other->right_arm_);
    std::swap(left_arm_, other->left_arm_);
    std::swap(torso_, other->torso_);
    std::swap(head_, other->head_);
    std::swap(enable_motor_, other->enable_motor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HumanoidCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HumanoidCommand_descriptor_;
  metadata.reflection = M3HumanoidCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HumanoidParam::kRightArmFieldNumber;
const int M3HumanoidParam::kLeftArmFieldNumber;
const int M3HumanoidParam::kTorsoFieldNumber;
const int M3HumanoidParam::kHeadFieldNumber;
#endif  // !_MSC_VER

M3HumanoidParam::M3HumanoidParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HumanoidParam::InitAsDefaultInstance() {
  right_arm_ = const_cast< ::M3BaseHumanoidParam*>(&::M3BaseHumanoidParam::default_instance());
  left_arm_ = const_cast< ::M3BaseHumanoidParam*>(&::M3BaseHumanoidParam::default_instance());
  torso_ = const_cast< ::M3BaseHumanoidParam*>(&::M3BaseHumanoidParam::default_instance());
  head_ = const_cast< ::M3BaseHumanoidParam*>(&::M3BaseHumanoidParam::default_instance());
}

M3HumanoidParam::M3HumanoidParam(const M3HumanoidParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HumanoidParam::SharedCtor() {
  _cached_size_ = 0;
  right_arm_ = NULL;
  left_arm_ = NULL;
  torso_ = NULL;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HumanoidParam::~M3HumanoidParam() {
  SharedDtor();
}

void M3HumanoidParam::SharedDtor() {
  if (this != default_instance_) {
    delete right_arm_;
    delete left_arm_;
    delete torso_;
    delete head_;
  }
}

void M3HumanoidParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HumanoidParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HumanoidParam_descriptor_;
}

const M3HumanoidParam& M3HumanoidParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3HumanoidParam* M3HumanoidParam::default_instance_ = NULL;

M3HumanoidParam* M3HumanoidParam::New() const {
  return new M3HumanoidParam;
}

void M3HumanoidParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_right_arm()) {
      if (right_arm_ != NULL) right_arm_->::M3BaseHumanoidParam::Clear();
    }
    if (has_left_arm()) {
      if (left_arm_ != NULL) left_arm_->::M3BaseHumanoidParam::Clear();
    }
    if (has_torso()) {
      if (torso_ != NULL) torso_->::M3BaseHumanoidParam::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::M3BaseHumanoidParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HumanoidParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseHumanoidParam right_arm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_arm;
        break;
      }
      
      // optional .M3BaseHumanoidParam left_arm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_torso;
        break;
      }
      
      // optional .M3BaseHumanoidParam torso = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }
      
      // optional .M3BaseHumanoidParam head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HumanoidParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseHumanoidParam right_arm = 1;
  if (has_right_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->right_arm(), output);
  }
  
  // optional .M3BaseHumanoidParam left_arm = 2;
  if (has_left_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_arm(), output);
  }
  
  // optional .M3BaseHumanoidParam torso = 3;
  if (has_torso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->torso(), output);
  }
  
  // optional .M3BaseHumanoidParam head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->head(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HumanoidParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseHumanoidParam right_arm = 1;
  if (has_right_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->right_arm(), target);
  }
  
  // optional .M3BaseHumanoidParam left_arm = 2;
  if (has_left_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_arm(), target);
  }
  
  // optional .M3BaseHumanoidParam torso = 3;
  if (has_torso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->torso(), target);
  }
  
  // optional .M3BaseHumanoidParam head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->head(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HumanoidParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseHumanoidParam right_arm = 1;
    if (has_right_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_arm());
    }
    
    // optional .M3BaseHumanoidParam left_arm = 2;
    if (has_left_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_arm());
    }
    
    // optional .M3BaseHumanoidParam torso = 3;
    if (has_torso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torso());
    }
    
    // optional .M3BaseHumanoidParam head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HumanoidParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HumanoidParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HumanoidParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HumanoidParam::MergeFrom(const M3HumanoidParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_right_arm()) {
      mutable_right_arm()->::M3BaseHumanoidParam::MergeFrom(from.right_arm());
    }
    if (from.has_left_arm()) {
      mutable_left_arm()->::M3BaseHumanoidParam::MergeFrom(from.left_arm());
    }
    if (from.has_torso()) {
      mutable_torso()->::M3BaseHumanoidParam::MergeFrom(from.torso());
    }
    if (from.has_head()) {
      mutable_head()->::M3BaseHumanoidParam::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HumanoidParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HumanoidParam::CopyFrom(const M3HumanoidParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HumanoidParam::IsInitialized() const {
  
  return true;
}

void M3HumanoidParam::Swap(M3HumanoidParam* other) {
  if (other != this) {
    std::swap(right_arm_, other->right_arm_);
    std::swap(left_arm_, other->left_arm_);
    std::swap(torso_, other->torso_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HumanoidParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HumanoidParam_descriptor_;
  metadata.reflection = M3HumanoidParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3BaseHumanoidStatus::kTorqueFieldNumber;
const int M3BaseHumanoidStatus::kTorquedotFieldNumber;
const int M3BaseHumanoidStatus::kThetaFieldNumber;
const int M3BaseHumanoidStatus::kThetadotFieldNumber;
const int M3BaseHumanoidStatus::kThetadotdotFieldNumber;
const int M3BaseHumanoidStatus::kCompletedSplineIdxFieldNumber;
const int M3BaseHumanoidStatus::kEndPosFieldNumber;
const int M3BaseHumanoidStatus::kEndRotFieldNumber;
const int M3BaseHumanoidStatus::kJFieldNumber;
const int M3BaseHumanoidStatus::kGFieldNumber;
const int M3BaseHumanoidStatus::kEndTwistFieldNumber;
const int M3BaseHumanoidStatus::kPwmCmdFieldNumber;
#endif  // !_MSC_VER

M3BaseHumanoidStatus::M3BaseHumanoidStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3BaseHumanoidStatus::InitAsDefaultInstance() {
}

M3BaseHumanoidStatus::M3BaseHumanoidStatus(const M3BaseHumanoidStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3BaseHumanoidStatus::SharedCtor() {
  _cached_size_ = 0;
  completed_spline_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3BaseHumanoidStatus::~M3BaseHumanoidStatus() {
  SharedDtor();
}

void M3BaseHumanoidStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3BaseHumanoidStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3BaseHumanoidStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3BaseHumanoidStatus_descriptor_;
}

const M3BaseHumanoidStatus& M3BaseHumanoidStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3BaseHumanoidStatus* M3BaseHumanoidStatus::default_instance_ = NULL;

M3BaseHumanoidStatus* M3BaseHumanoidStatus::New() const {
  return new M3BaseHumanoidStatus;
}

void M3BaseHumanoidStatus::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    completed_spline_idx_ = 0;
  }
  torque_.Clear();
  torquedot_.Clear();
  theta_.Clear();
  thetadot_.Clear();
  thetadotdot_.Clear();
  end_pos_.Clear();
  end_rot_.Clear();
  j_.Clear();
  g_.Clear();
  end_twist_.Clear();
  pwm_cmd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3BaseHumanoidStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double torque = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_torque())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_torque())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_torque;
        if (input->ExpectTag(17)) goto parse_torquedot;
        break;
      }
      
      // repeated double torquedot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torquedot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_torquedot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_torquedot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_torquedot;
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }
      
      // repeated double theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_theta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        if (input->ExpectTag(41)) goto parse_thetadot;
        break;
      }
      
      // repeated double thetadot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thetadot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_thetadot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thetadot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_thetadot;
        if (input->ExpectTag(49)) goto parse_thetadotdot;
        break;
      }
      
      // repeated double thetadotdot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thetadotdot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_thetadotdot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thetadotdot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_thetadotdot;
        if (input->ExpectTag(56)) goto parse_completed_spline_idx;
        break;
      }
      
      // optional int32 completed_spline_idx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed_spline_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_spline_idx_)));
          set_has_completed_spline_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_end_pos;
        break;
      }
      
      // repeated double end_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_end_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_end_pos;
        if (input->ExpectTag(73)) goto parse_end_rot;
        break;
      }
      
      // repeated double end_rot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_end_rot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_rot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_end_rot;
        if (input->ExpectTag(81)) goto parse_J;
        break;
      }
      
      // repeated double J = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_J:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_j())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_j())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_J;
        if (input->ExpectTag(89)) goto parse_G;
        break;
      }
      
      // repeated double G = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_g())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_g())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_G;
        if (input->ExpectTag(97)) goto parse_end_twist;
        break;
      }
      
      // repeated double end_twist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_twist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_end_twist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_twist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_end_twist;
        if (input->ExpectTag(104)) goto parse_pwm_cmd;
        break;
      }
      
      // repeated int32 pwm_cmd = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwm_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_pwm_cmd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwm_cmd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pwm_cmd;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3BaseHumanoidStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double torque = 1;
  for (int i = 0; i < this->torque_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->torque(i), output);
  }
  
  // repeated double torquedot = 2;
  for (int i = 0; i < this->torquedot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->torquedot(i), output);
  }
  
  // repeated double theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->theta(i), output);
  }
  
  // repeated double thetadot = 5;
  for (int i = 0; i < this->thetadot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->thetadot(i), output);
  }
  
  // repeated double thetadotdot = 6;
  for (int i = 0; i < this->thetadotdot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->thetadotdot(i), output);
  }
  
  // optional int32 completed_spline_idx = 7;
  if (has_completed_spline_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->completed_spline_idx(), output);
  }
  
  // repeated double end_pos = 8;
  for (int i = 0; i < this->end_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->end_pos(i), output);
  }
  
  // repeated double end_rot = 9;
  for (int i = 0; i < this->end_rot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->end_rot(i), output);
  }
  
  // repeated double J = 10;
  for (int i = 0; i < this->j_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->j(i), output);
  }
  
  // repeated double G = 11;
  for (int i = 0; i < this->g_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->g(i), output);
  }
  
  // repeated double end_twist = 12;
  for (int i = 0; i < this->end_twist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->end_twist(i), output);
  }
  
  // repeated int32 pwm_cmd = 13;
  for (int i = 0; i < this->pwm_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->pwm_cmd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3BaseHumanoidStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double torque = 1;
  for (int i = 0; i < this->torque_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->torque(i), target);
  }
  
  // repeated double torquedot = 2;
  for (int i = 0; i < this->torquedot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->torquedot(i), target);
  }
  
  // repeated double theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->theta(i), target);
  }
  
  // repeated double thetadot = 5;
  for (int i = 0; i < this->thetadot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->thetadot(i), target);
  }
  
  // repeated double thetadotdot = 6;
  for (int i = 0; i < this->thetadotdot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->thetadotdot(i), target);
  }
  
  // optional int32 completed_spline_idx = 7;
  if (has_completed_spline_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->completed_spline_idx(), target);
  }
  
  // repeated double end_pos = 8;
  for (int i = 0; i < this->end_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->end_pos(i), target);
  }
  
  // repeated double end_rot = 9;
  for (int i = 0; i < this->end_rot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->end_rot(i), target);
  }
  
  // repeated double J = 10;
  for (int i = 0; i < this->j_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->j(i), target);
  }
  
  // repeated double G = 11;
  for (int i = 0; i < this->g_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->g(i), target);
  }
  
  // repeated double end_twist = 12;
  for (int i = 0; i < this->end_twist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->end_twist(i), target);
  }
  
  // repeated int32 pwm_cmd = 13;
  for (int i = 0; i < this->pwm_cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->pwm_cmd(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3BaseHumanoidStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 completed_spline_idx = 7;
    if (has_completed_spline_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completed_spline_idx());
    }
    
  }
  // repeated double torque = 1;
  {
    int data_size = 0;
    data_size = 8 * this->torque_size();
    total_size += 1 * this->torque_size() + data_size;
  }
  
  // repeated double torquedot = 2;
  {
    int data_size = 0;
    data_size = 8 * this->torquedot_size();
    total_size += 1 * this->torquedot_size() + data_size;
  }
  
  // repeated double theta = 4;
  {
    int data_size = 0;
    data_size = 8 * this->theta_size();
    total_size += 1 * this->theta_size() + data_size;
  }
  
  // repeated double thetadot = 5;
  {
    int data_size = 0;
    data_size = 8 * this->thetadot_size();
    total_size += 1 * this->thetadot_size() + data_size;
  }
  
  // repeated double thetadotdot = 6;
  {
    int data_size = 0;
    data_size = 8 * this->thetadotdot_size();
    total_size += 1 * this->thetadotdot_size() + data_size;
  }
  
  // repeated double end_pos = 8;
  {
    int data_size = 0;
    data_size = 8 * this->end_pos_size();
    total_size += 1 * this->end_pos_size() + data_size;
  }
  
  // repeated double end_rot = 9;
  {
    int data_size = 0;
    data_size = 8 * this->end_rot_size();
    total_size += 1 * this->end_rot_size() + data_size;
  }
  
  // repeated double J = 10;
  {
    int data_size = 0;
    data_size = 8 * this->j_size();
    total_size += 1 * this->j_size() + data_size;
  }
  
  // repeated double G = 11;
  {
    int data_size = 0;
    data_size = 8 * this->g_size();
    total_size += 1 * this->g_size() + data_size;
  }
  
  // repeated double end_twist = 12;
  {
    int data_size = 0;
    data_size = 8 * this->end_twist_size();
    total_size += 1 * this->end_twist_size() + data_size;
  }
  
  // repeated int32 pwm_cmd = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwm_cmd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwm_cmd(i));
    }
    total_size += 1 * this->pwm_cmd_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3BaseHumanoidStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3BaseHumanoidStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3BaseHumanoidStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3BaseHumanoidStatus::MergeFrom(const M3BaseHumanoidStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  torque_.MergeFrom(from.torque_);
  torquedot_.MergeFrom(from.torquedot_);
  theta_.MergeFrom(from.theta_);
  thetadot_.MergeFrom(from.thetadot_);
  thetadotdot_.MergeFrom(from.thetadotdot_);
  end_pos_.MergeFrom(from.end_pos_);
  end_rot_.MergeFrom(from.end_rot_);
  j_.MergeFrom(from.j_);
  g_.MergeFrom(from.g_);
  end_twist_.MergeFrom(from.end_twist_);
  pwm_cmd_.MergeFrom(from.pwm_cmd_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_completed_spline_idx()) {
      set_completed_spline_idx(from.completed_spline_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3BaseHumanoidStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3BaseHumanoidStatus::CopyFrom(const M3BaseHumanoidStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3BaseHumanoidStatus::IsInitialized() const {
  
  return true;
}

void M3BaseHumanoidStatus::Swap(M3BaseHumanoidStatus* other) {
  if (other != this) {
    torque_.Swap(&other->torque_);
    torquedot_.Swap(&other->torquedot_);
    theta_.Swap(&other->theta_);
    thetadot_.Swap(&other->thetadot_);
    thetadotdot_.Swap(&other->thetadotdot_);
    std::swap(completed_spline_idx_, other->completed_spline_idx_);
    end_pos_.Swap(&other->end_pos_);
    end_rot_.Swap(&other->end_rot_);
    j_.Swap(&other->j_);
    g_.Swap(&other->g_);
    end_twist_.Swap(&other->end_twist_);
    pwm_cmd_.Swap(&other->pwm_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3BaseHumanoidStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3BaseHumanoidStatus_descriptor_;
  metadata.reflection = M3BaseHumanoidStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3BaseHumanoidCommand::kTqDesiredFieldNumber;
const int M3BaseHumanoidCommand::kQStiffnessFieldNumber;
const int M3BaseHumanoidCommand::kCtrlModeFieldNumber;
const int M3BaseHumanoidCommand::kQDesiredFieldNumber;
const int M3BaseHumanoidCommand::kViasFieldNumber;
const int M3BaseHumanoidCommand::kQdotDesiredFieldNumber;
const int M3BaseHumanoidCommand::kQSlewRateFieldNumber;
const int M3BaseHumanoidCommand::kPwmDesiredFieldNumber;
const int M3BaseHumanoidCommand::kSmoothingModeFieldNumber;
#endif  // !_MSC_VER

M3BaseHumanoidCommand::M3BaseHumanoidCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3BaseHumanoidCommand::InitAsDefaultInstance() {
}

M3BaseHumanoidCommand::M3BaseHumanoidCommand(const M3BaseHumanoidCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3BaseHumanoidCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3BaseHumanoidCommand::~M3BaseHumanoidCommand() {
  SharedDtor();
}

void M3BaseHumanoidCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3BaseHumanoidCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3BaseHumanoidCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3BaseHumanoidCommand_descriptor_;
}

const M3BaseHumanoidCommand& M3BaseHumanoidCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3BaseHumanoidCommand* M3BaseHumanoidCommand::default_instance_ = NULL;

M3BaseHumanoidCommand* M3BaseHumanoidCommand::New() const {
  return new M3BaseHumanoidCommand;
}

void M3BaseHumanoidCommand::Clear() {
  tq_desired_.Clear();
  q_stiffness_.Clear();
  ctrl_mode_.Clear();
  q_desired_.Clear();
  vias_.Clear();
  qdot_desired_.Clear();
  q_slew_rate_.Clear();
  pwm_desired_.Clear();
  smoothing_mode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3BaseHumanoidCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double tq_desired = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tq_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_tq_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_tq_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_tq_desired;
        if (input->ExpectTag(17)) goto parse_q_stiffness;
        break;
      }
      
      // repeated double q_stiffness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_q_stiffness())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q_stiffness())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_q_stiffness;
        if (input->ExpectTag(24)) goto parse_ctrl_mode;
        break;
      }
      
      // repeated .JOINT_ARRAY_MODE ctrl_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (JOINT_ARRAY_MODE_IsValid(value)) {
            add_ctrl_mode(static_cast< JOINT_ARRAY_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &JOINT_ARRAY_MODE_IsValid,
                 this->mutable_ctrl_mode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctrl_mode;
        if (input->ExpectTag(33)) goto parse_q_desired;
        break;
      }
      
      // repeated double q_desired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_q_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_q_desired;
        if (input->ExpectTag(42)) goto parse_vias;
        break;
      }
      
      // repeated .M3JointVia vias = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vias;
        if (input->ExpectTag(49)) goto parse_qdot_desired;
        break;
      }
      
      // repeated double qdot_desired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_qdot_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_qdot_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_qdot_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_qdot_desired;
        if (input->ExpectTag(57)) goto parse_q_slew_rate;
        break;
      }
      
      // repeated double q_slew_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_slew_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_q_slew_rate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q_slew_rate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_q_slew_rate;
        if (input->ExpectTag(65)) goto parse_pwm_desired;
        break;
      }
      
      // repeated double pwm_desired = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pwm_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_pwm_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pwm_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_pwm_desired;
        if (input->ExpectTag(72)) goto parse_smoothing_mode;
        break;
      }
      
      // repeated .SMOOTHING_MODE smoothing_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smoothing_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SMOOTHING_MODE_IsValid(value)) {
            add_smoothing_mode(static_cast< SMOOTHING_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &SMOOTHING_MODE_IsValid,
                 this->mutable_smoothing_mode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_smoothing_mode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3BaseHumanoidCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double tq_desired = 1;
  for (int i = 0; i < this->tq_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->tq_desired(i), output);
  }
  
  // repeated double q_stiffness = 2;
  for (int i = 0; i < this->q_stiffness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->q_stiffness(i), output);
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 3;
  for (int i = 0; i < this->ctrl_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ctrl_mode(i), output);
  }
  
  // repeated double q_desired = 4;
  for (int i = 0; i < this->q_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->q_desired(i), output);
  }
  
  // repeated .M3JointVia vias = 5;
  for (int i = 0; i < this->vias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vias(i), output);
  }
  
  // repeated double qdot_desired = 6;
  for (int i = 0; i < this->qdot_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->qdot_desired(i), output);
  }
  
  // repeated double q_slew_rate = 7;
  for (int i = 0; i < this->q_slew_rate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->q_slew_rate(i), output);
  }
  
  // repeated double pwm_desired = 8;
  for (int i = 0; i < this->pwm_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->pwm_desired(i), output);
  }
  
  // repeated .SMOOTHING_MODE smoothing_mode = 9;
  for (int i = 0; i < this->smoothing_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->smoothing_mode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3BaseHumanoidCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double tq_desired = 1;
  for (int i = 0; i < this->tq_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->tq_desired(i), target);
  }
  
  // repeated double q_stiffness = 2;
  for (int i = 0; i < this->q_stiffness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->q_stiffness(i), target);
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 3;
  for (int i = 0; i < this->ctrl_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ctrl_mode(i), target);
  }
  
  // repeated double q_desired = 4;
  for (int i = 0; i < this->q_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->q_desired(i), target);
  }
  
  // repeated .M3JointVia vias = 5;
  for (int i = 0; i < this->vias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vias(i), target);
  }
  
  // repeated double qdot_desired = 6;
  for (int i = 0; i < this->qdot_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->qdot_desired(i), target);
  }
  
  // repeated double q_slew_rate = 7;
  for (int i = 0; i < this->q_slew_rate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->q_slew_rate(i), target);
  }
  
  // repeated double pwm_desired = 8;
  for (int i = 0; i < this->pwm_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->pwm_desired(i), target);
  }
  
  // repeated .SMOOTHING_MODE smoothing_mode = 9;
  for (int i = 0; i < this->smoothing_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->smoothing_mode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3BaseHumanoidCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated double tq_desired = 1;
  {
    int data_size = 0;
    data_size = 8 * this->tq_desired_size();
    total_size += 1 * this->tq_desired_size() + data_size;
  }
  
  // repeated double q_stiffness = 2;
  {
    int data_size = 0;
    data_size = 8 * this->q_stiffness_size();
    total_size += 1 * this->q_stiffness_size() + data_size;
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ctrl_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ctrl_mode(i));
    }
    total_size += 1 * this->ctrl_mode_size() + data_size;
  }
  
  // repeated double q_desired = 4;
  {
    int data_size = 0;
    data_size = 8 * this->q_desired_size();
    total_size += 1 * this->q_desired_size() + data_size;
  }
  
  // repeated .M3JointVia vias = 5;
  total_size += 1 * this->vias_size();
  for (int i = 0; i < this->vias_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vias(i));
  }
  
  // repeated double qdot_desired = 6;
  {
    int data_size = 0;
    data_size = 8 * this->qdot_desired_size();
    total_size += 1 * this->qdot_desired_size() + data_size;
  }
  
  // repeated double q_slew_rate = 7;
  {
    int data_size = 0;
    data_size = 8 * this->q_slew_rate_size();
    total_size += 1 * this->q_slew_rate_size() + data_size;
  }
  
  // repeated double pwm_desired = 8;
  {
    int data_size = 0;
    data_size = 8 * this->pwm_desired_size();
    total_size += 1 * this->pwm_desired_size() + data_size;
  }
  
  // repeated .SMOOTHING_MODE smoothing_mode = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->smoothing_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->smoothing_mode(i));
    }
    total_size += 1 * this->smoothing_mode_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3BaseHumanoidCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3BaseHumanoidCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3BaseHumanoidCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3BaseHumanoidCommand::MergeFrom(const M3BaseHumanoidCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  tq_desired_.MergeFrom(from.tq_desired_);
  q_stiffness_.MergeFrom(from.q_stiffness_);
  ctrl_mode_.MergeFrom(from.ctrl_mode_);
  q_desired_.MergeFrom(from.q_desired_);
  vias_.MergeFrom(from.vias_);
  qdot_desired_.MergeFrom(from.qdot_desired_);
  q_slew_rate_.MergeFrom(from.q_slew_rate_);
  pwm_desired_.MergeFrom(from.pwm_desired_);
  smoothing_mode_.MergeFrom(from.smoothing_mode_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3BaseHumanoidCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3BaseHumanoidCommand::CopyFrom(const M3BaseHumanoidCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3BaseHumanoidCommand::IsInitialized() const {
  
  return true;
}

void M3BaseHumanoidCommand::Swap(M3BaseHumanoidCommand* other) {
  if (other != this) {
    tq_desired_.Swap(&other->tq_desired_);
    q_stiffness_.Swap(&other->q_stiffness_);
    ctrl_mode_.Swap(&other->ctrl_mode_);
    q_desired_.Swap(&other->q_desired_);
    vias_.Swap(&other->vias_);
    qdot_desired_.Swap(&other->qdot_desired_);
    q_slew_rate_.Swap(&other->q_slew_rate_);
    pwm_desired_.Swap(&other->pwm_desired_);
    smoothing_mode_.Swap(&other->smoothing_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3BaseHumanoidCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3BaseHumanoidCommand_descriptor_;
  metadata.reflection = M3BaseHumanoidCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3BaseHumanoidParam::kPayloadMassFieldNumber;
const int M3BaseHumanoidParam::kPayloadComFieldNumber;
const int M3BaseHumanoidParam::kPayloadInertiaFieldNumber;
const int M3BaseHumanoidParam::kUseVelocitiesFieldNumber;
const int M3BaseHumanoidParam::kUseAccelerationsFieldNumber;
#endif  // !_MSC_VER

M3BaseHumanoidParam::M3BaseHumanoidParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3BaseHumanoidParam::InitAsDefaultInstance() {
}

M3BaseHumanoidParam::M3BaseHumanoidParam(const M3BaseHumanoidParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3BaseHumanoidParam::SharedCtor() {
  _cached_size_ = 0;
  payload_mass_ = 0;
  use_velocities_ = false;
  use_accelerations_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3BaseHumanoidParam::~M3BaseHumanoidParam() {
  SharedDtor();
}

void M3BaseHumanoidParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3BaseHumanoidParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3BaseHumanoidParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3BaseHumanoidParam_descriptor_;
}

const M3BaseHumanoidParam& M3BaseHumanoidParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_humanoid_2eproto();  return *default_instance_;
}

M3BaseHumanoidParam* M3BaseHumanoidParam::default_instance_ = NULL;

M3BaseHumanoidParam* M3BaseHumanoidParam::New() const {
  return new M3BaseHumanoidParam;
}

void M3BaseHumanoidParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payload_mass_ = 0;
    use_velocities_ = false;
    use_accelerations_ = false;
  }
  payload_com_.Clear();
  payload_inertia_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3BaseHumanoidParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double payload_mass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &payload_mass_)));
          set_has_payload_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_payload_com;
        break;
      }
      
      // repeated double payload_com = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_payload_com:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_payload_com())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_payload_com())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_payload_com;
        if (input->ExpectTag(25)) goto parse_payload_inertia;
        break;
      }
      
      // repeated double payload_inertia = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_payload_inertia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_payload_inertia())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_payload_inertia())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_payload_inertia;
        if (input->ExpectTag(32)) goto parse_use_velocities;
        break;
      }
      
      // optional bool use_velocities = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_velocities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_velocities_)));
          set_has_use_velocities();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_accelerations;
        break;
      }
      
      // optional bool use_accelerations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accelerations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accelerations_)));
          set_has_use_accelerations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3BaseHumanoidParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double payload_mass = 1;
  if (has_payload_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->payload_mass(), output);
  }
  
  // repeated double payload_com = 2;
  for (int i = 0; i < this->payload_com_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->payload_com(i), output);
  }
  
  // repeated double payload_inertia = 3;
  for (int i = 0; i < this->payload_inertia_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->payload_inertia(i), output);
  }
  
  // optional bool use_velocities = 4;
  if (has_use_velocities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_velocities(), output);
  }
  
  // optional bool use_accelerations = 5;
  if (has_use_accelerations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_accelerations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3BaseHumanoidParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double payload_mass = 1;
  if (has_payload_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->payload_mass(), target);
  }
  
  // repeated double payload_com = 2;
  for (int i = 0; i < this->payload_com_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->payload_com(i), target);
  }
  
  // repeated double payload_inertia = 3;
  for (int i = 0; i < this->payload_inertia_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->payload_inertia(i), target);
  }
  
  // optional bool use_velocities = 4;
  if (has_use_velocities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_velocities(), target);
  }
  
  // optional bool use_accelerations = 5;
  if (has_use_accelerations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_accelerations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3BaseHumanoidParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double payload_mass = 1;
    if (has_payload_mass()) {
      total_size += 1 + 8;
    }
    
    // optional bool use_velocities = 4;
    if (has_use_velocities()) {
      total_size += 1 + 1;
    }
    
    // optional bool use_accelerations = 5;
    if (has_use_accelerations()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated double payload_com = 2;
  {
    int data_size = 0;
    data_size = 8 * this->payload_com_size();
    total_size += 1 * this->payload_com_size() + data_size;
  }
  
  // repeated double payload_inertia = 3;
  {
    int data_size = 0;
    data_size = 8 * this->payload_inertia_size();
    total_size += 1 * this->payload_inertia_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3BaseHumanoidParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3BaseHumanoidParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3BaseHumanoidParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3BaseHumanoidParam::MergeFrom(const M3BaseHumanoidParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  payload_com_.MergeFrom(from.payload_com_);
  payload_inertia_.MergeFrom(from.payload_inertia_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_mass()) {
      set_payload_mass(from.payload_mass());
    }
    if (from.has_use_velocities()) {
      set_use_velocities(from.use_velocities());
    }
    if (from.has_use_accelerations()) {
      set_use_accelerations(from.use_accelerations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3BaseHumanoidParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3BaseHumanoidParam::CopyFrom(const M3BaseHumanoidParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3BaseHumanoidParam::IsInitialized() const {
  
  return true;
}

void M3BaseHumanoidParam::Swap(M3BaseHumanoidParam* other) {
  if (other != this) {
    std::swap(payload_mass_, other->payload_mass_);
    payload_com_.Swap(&other->payload_com_);
    payload_inertia_.Swap(&other->payload_inertia_);
    std::swap(use_velocities_, other->use_velocities_);
    std::swap(use_accelerations_, other->use_accelerations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3BaseHumanoidParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3BaseHumanoidParam_descriptor_;
  metadata.reflection = M3BaseHumanoidParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
