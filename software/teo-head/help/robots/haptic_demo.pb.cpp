// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "haptic_demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3HapticDemoStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HapticDemoStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HapticDemoParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HapticDemoParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HapticDemoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HapticDemoCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_haptic_5fdemo_2eproto() {
  protobuf_AddDesc_haptic_5fdemo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "haptic_demo.proto");
  GOOGLE_CHECK(file != NULL);
  M3HapticDemoStatus_descriptor_ = file->message_type(0);
  static const int M3HapticDemoStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoStatus, foo_),
  };
  M3HapticDemoStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HapticDemoStatus_descriptor_,
      M3HapticDemoStatus::default_instance_,
      M3HapticDemoStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HapticDemoStatus));
  M3HapticDemoParam_descriptor_ = file->message_type(1);
  static const int M3HapticDemoParam_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, max_fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, max_fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, max_fz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, x_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, y_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, z_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, x_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, y_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, z_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, x_k_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, y_k_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, z_k_d_),
  };
  M3HapticDemoParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HapticDemoParam_descriptor_,
      M3HapticDemoParam::default_instance_,
      M3HapticDemoParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HapticDemoParam));
  M3HapticDemoCommand_descriptor_ = file->message_type(2);
  static const int M3HapticDemoCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoCommand, enable_),
  };
  M3HapticDemoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HapticDemoCommand_descriptor_,
      M3HapticDemoCommand::default_instance_,
      M3HapticDemoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HapticDemoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HapticDemoCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_haptic_5fdemo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HapticDemoStatus_descriptor_, &M3HapticDemoStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HapticDemoParam_descriptor_, &M3HapticDemoParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HapticDemoCommand_descriptor_, &M3HapticDemoCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_haptic_5fdemo_2eproto() {
  delete M3HapticDemoStatus::default_instance_;
  delete M3HapticDemoStatus_reflection_;
  delete M3HapticDemoParam::default_instance_;
  delete M3HapticDemoParam_reflection_;
  delete M3HapticDemoCommand::default_instance_;
  delete M3HapticDemoCommand_reflection_;
}

void protobuf_AddDesc_haptic_5fdemo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021haptic_demo.proto\032\024component_base.prot"
    "o\">\n\022M3HapticDemoStatus\022\033\n\004base\030\001 \001(\0132\r."
    "M3BaseStatus\022\013\n\003foo\030\002 \001(\001\"\320\001\n\021M3HapticDe"
    "moParam\022\016\n\006max_fx\030\001 \001(\001\022\016\n\006max_fy\030\002 \001(\001\022"
    "\016\n\006max_fz\030\003 \001(\001\022\013\n\003x_k\030\004 \001(\001\022\013\n\003y_k\030\005 \001("
    "\001\022\013\n\003z_k\030\006 \001(\001\022\021\n\tx_desired\030\007 \001(\001\022\021\n\ty_d"
    "esired\030\010 \001(\001\022\021\n\tz_desired\030\t \001(\001\022\r\n\005x_k_d"
    "\030\n \001(\001\022\r\n\005y_k_d\030\013 \001(\001\022\r\n\005z_k_d\030\014 \001(\001\"%\n\023"
    "M3HapticDemoCommand\022\016\n\006enable\030\001 \001(\010B\002H\001", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "haptic_demo.proto", &protobuf_RegisterTypes);
  M3HapticDemoStatus::default_instance_ = new M3HapticDemoStatus();
  M3HapticDemoParam::default_instance_ = new M3HapticDemoParam();
  M3HapticDemoCommand::default_instance_ = new M3HapticDemoCommand();
  M3HapticDemoStatus::default_instance_->InitAsDefaultInstance();
  M3HapticDemoParam::default_instance_->InitAsDefaultInstance();
  M3HapticDemoCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_haptic_5fdemo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_haptic_5fdemo_2eproto {
  StaticDescriptorInitializer_haptic_5fdemo_2eproto() {
    protobuf_AddDesc_haptic_5fdemo_2eproto();
  }
} static_descriptor_initializer_haptic_5fdemo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3HapticDemoStatus::kBaseFieldNumber;
const int M3HapticDemoStatus::kFooFieldNumber;
#endif  // !_MSC_VER

M3HapticDemoStatus::M3HapticDemoStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HapticDemoStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3HapticDemoStatus::M3HapticDemoStatus(const M3HapticDemoStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HapticDemoStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  foo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HapticDemoStatus::~M3HapticDemoStatus() {
  SharedDtor();
}

void M3HapticDemoStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3HapticDemoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HapticDemoStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HapticDemoStatus_descriptor_;
}

const M3HapticDemoStatus& M3HapticDemoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_haptic_5fdemo_2eproto();  return *default_instance_;
}

M3HapticDemoStatus* M3HapticDemoStatus::default_instance_ = NULL;

M3HapticDemoStatus* M3HapticDemoStatus::New() const {
  return new M3HapticDemoStatus;
}

void M3HapticDemoStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    foo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HapticDemoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_foo;
        break;
      }
      
      // optional double foo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_foo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &foo_)));
          set_has_foo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HapticDemoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional double foo = 2;
  if (has_foo()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->foo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HapticDemoStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double foo = 2;
  if (has_foo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->foo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HapticDemoStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double foo = 2;
    if (has_foo()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HapticDemoStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HapticDemoStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HapticDemoStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HapticDemoStatus::MergeFrom(const M3HapticDemoStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_foo()) {
      set_foo(from.foo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HapticDemoStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HapticDemoStatus::CopyFrom(const M3HapticDemoStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HapticDemoStatus::IsInitialized() const {
  
  return true;
}

void M3HapticDemoStatus::Swap(M3HapticDemoStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(foo_, other->foo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HapticDemoStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HapticDemoStatus_descriptor_;
  metadata.reflection = M3HapticDemoStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HapticDemoParam::kMaxFxFieldNumber;
const int M3HapticDemoParam::kMaxFyFieldNumber;
const int M3HapticDemoParam::kMaxFzFieldNumber;
const int M3HapticDemoParam::kXKFieldNumber;
const int M3HapticDemoParam::kYKFieldNumber;
const int M3HapticDemoParam::kZKFieldNumber;
const int M3HapticDemoParam::kXDesiredFieldNumber;
const int M3HapticDemoParam::kYDesiredFieldNumber;
const int M3HapticDemoParam::kZDesiredFieldNumber;
const int M3HapticDemoParam::kXKDFieldNumber;
const int M3HapticDemoParam::kYKDFieldNumber;
const int M3HapticDemoParam::kZKDFieldNumber;
#endif  // !_MSC_VER

M3HapticDemoParam::M3HapticDemoParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HapticDemoParam::InitAsDefaultInstance() {
}

M3HapticDemoParam::M3HapticDemoParam(const M3HapticDemoParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HapticDemoParam::SharedCtor() {
  _cached_size_ = 0;
  max_fx_ = 0;
  max_fy_ = 0;
  max_fz_ = 0;
  x_k_ = 0;
  y_k_ = 0;
  z_k_ = 0;
  x_desired_ = 0;
  y_desired_ = 0;
  z_desired_ = 0;
  x_k_d_ = 0;
  y_k_d_ = 0;
  z_k_d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HapticDemoParam::~M3HapticDemoParam() {
  SharedDtor();
}

void M3HapticDemoParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3HapticDemoParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HapticDemoParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HapticDemoParam_descriptor_;
}

const M3HapticDemoParam& M3HapticDemoParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_haptic_5fdemo_2eproto();  return *default_instance_;
}

M3HapticDemoParam* M3HapticDemoParam::default_instance_ = NULL;

M3HapticDemoParam* M3HapticDemoParam::New() const {
  return new M3HapticDemoParam;
}

void M3HapticDemoParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_fx_ = 0;
    max_fy_ = 0;
    max_fz_ = 0;
    x_k_ = 0;
    y_k_ = 0;
    z_k_ = 0;
    x_desired_ = 0;
    y_desired_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    z_desired_ = 0;
    x_k_d_ = 0;
    y_k_d_ = 0;
    z_k_d_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HapticDemoParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_fx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_fx_)));
          set_has_max_fx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_max_fy;
        break;
      }
      
      // optional double max_fy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_fy_)));
          set_has_max_fy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_max_fz;
        break;
      }
      
      // optional double max_fz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_fz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_fz_)));
          set_has_max_fz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x_k;
        break;
      }
      
      // optional double x_k = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_k_)));
          set_has_x_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y_k;
        break;
      }
      
      // optional double y_k = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_k_)));
          set_has_y_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_z_k;
        break;
      }
      
      // optional double z_k = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_k_)));
          set_has_z_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_x_desired;
        break;
      }
      
      // optional double x_desired = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_desired_)));
          set_has_x_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_y_desired;
        break;
      }
      
      // optional double y_desired = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_desired_)));
          set_has_y_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_z_desired;
        break;
      }
      
      // optional double z_desired = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_desired_)));
          set_has_z_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_x_k_d;
        break;
      }
      
      // optional double x_k_d = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x_k_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_k_d_)));
          set_has_x_k_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_y_k_d;
        break;
      }
      
      // optional double y_k_d = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y_k_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_k_d_)));
          set_has_y_k_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_z_k_d;
        break;
      }
      
      // optional double z_k_d = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z_k_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_k_d_)));
          set_has_z_k_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HapticDemoParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double max_fx = 1;
  if (has_max_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_fx(), output);
  }
  
  // optional double max_fy = 2;
  if (has_max_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_fy(), output);
  }
  
  // optional double max_fz = 3;
  if (has_max_fz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_fz(), output);
  }
  
  // optional double x_k = 4;
  if (has_x_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_k(), output);
  }
  
  // optional double y_k = 5;
  if (has_y_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_k(), output);
  }
  
  // optional double z_k = 6;
  if (has_z_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_k(), output);
  }
  
  // optional double x_desired = 7;
  if (has_x_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->x_desired(), output);
  }
  
  // optional double y_desired = 8;
  if (has_y_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->y_desired(), output);
  }
  
  // optional double z_desired = 9;
  if (has_z_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->z_desired(), output);
  }
  
  // optional double x_k_d = 10;
  if (has_x_k_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x_k_d(), output);
  }
  
  // optional double y_k_d = 11;
  if (has_y_k_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->y_k_d(), output);
  }
  
  // optional double z_k_d = 12;
  if (has_z_k_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->z_k_d(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HapticDemoParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double max_fx = 1;
  if (has_max_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_fx(), target);
  }
  
  // optional double max_fy = 2;
  if (has_max_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_fy(), target);
  }
  
  // optional double max_fz = 3;
  if (has_max_fz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_fz(), target);
  }
  
  // optional double x_k = 4;
  if (has_x_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_k(), target);
  }
  
  // optional double y_k = 5;
  if (has_y_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_k(), target);
  }
  
  // optional double z_k = 6;
  if (has_z_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_k(), target);
  }
  
  // optional double x_desired = 7;
  if (has_x_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->x_desired(), target);
  }
  
  // optional double y_desired = 8;
  if (has_y_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->y_desired(), target);
  }
  
  // optional double z_desired = 9;
  if (has_z_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->z_desired(), target);
  }
  
  // optional double x_k_d = 10;
  if (has_x_k_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x_k_d(), target);
  }
  
  // optional double y_k_d = 11;
  if (has_y_k_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->y_k_d(), target);
  }
  
  // optional double z_k_d = 12;
  if (has_z_k_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->z_k_d(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HapticDemoParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_fx = 1;
    if (has_max_fx()) {
      total_size += 1 + 8;
    }
    
    // optional double max_fy = 2;
    if (has_max_fy()) {
      total_size += 1 + 8;
    }
    
    // optional double max_fz = 3;
    if (has_max_fz()) {
      total_size += 1 + 8;
    }
    
    // optional double x_k = 4;
    if (has_x_k()) {
      total_size += 1 + 8;
    }
    
    // optional double y_k = 5;
    if (has_y_k()) {
      total_size += 1 + 8;
    }
    
    // optional double z_k = 6;
    if (has_z_k()) {
      total_size += 1 + 8;
    }
    
    // optional double x_desired = 7;
    if (has_x_desired()) {
      total_size += 1 + 8;
    }
    
    // optional double y_desired = 8;
    if (has_y_desired()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double z_desired = 9;
    if (has_z_desired()) {
      total_size += 1 + 8;
    }
    
    // optional double x_k_d = 10;
    if (has_x_k_d()) {
      total_size += 1 + 8;
    }
    
    // optional double y_k_d = 11;
    if (has_y_k_d()) {
      total_size += 1 + 8;
    }
    
    // optional double z_k_d = 12;
    if (has_z_k_d()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HapticDemoParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HapticDemoParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HapticDemoParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HapticDemoParam::MergeFrom(const M3HapticDemoParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_fx()) {
      set_max_fx(from.max_fx());
    }
    if (from.has_max_fy()) {
      set_max_fy(from.max_fy());
    }
    if (from.has_max_fz()) {
      set_max_fz(from.max_fz());
    }
    if (from.has_x_k()) {
      set_x_k(from.x_k());
    }
    if (from.has_y_k()) {
      set_y_k(from.y_k());
    }
    if (from.has_z_k()) {
      set_z_k(from.z_k());
    }
    if (from.has_x_desired()) {
      set_x_desired(from.x_desired());
    }
    if (from.has_y_desired()) {
      set_y_desired(from.y_desired());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_z_desired()) {
      set_z_desired(from.z_desired());
    }
    if (from.has_x_k_d()) {
      set_x_k_d(from.x_k_d());
    }
    if (from.has_y_k_d()) {
      set_y_k_d(from.y_k_d());
    }
    if (from.has_z_k_d()) {
      set_z_k_d(from.z_k_d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HapticDemoParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HapticDemoParam::CopyFrom(const M3HapticDemoParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HapticDemoParam::IsInitialized() const {
  
  return true;
}

void M3HapticDemoParam::Swap(M3HapticDemoParam* other) {
  if (other != this) {
    std::swap(max_fx_, other->max_fx_);
    std::swap(max_fy_, other->max_fy_);
    std::swap(max_fz_, other->max_fz_);
    std::swap(x_k_, other->x_k_);
    std::swap(y_k_, other->y_k_);
    std::swap(z_k_, other->z_k_);
    std::swap(x_desired_, other->x_desired_);
    std::swap(y_desired_, other->y_desired_);
    std::swap(z_desired_, other->z_desired_);
    std::swap(x_k_d_, other->x_k_d_);
    std::swap(y_k_d_, other->y_k_d_);
    std::swap(z_k_d_, other->z_k_d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HapticDemoParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HapticDemoParam_descriptor_;
  metadata.reflection = M3HapticDemoParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HapticDemoCommand::kEnableFieldNumber;
#endif  // !_MSC_VER

M3HapticDemoCommand::M3HapticDemoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HapticDemoCommand::InitAsDefaultInstance() {
}

M3HapticDemoCommand::M3HapticDemoCommand(const M3HapticDemoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HapticDemoCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HapticDemoCommand::~M3HapticDemoCommand() {
  SharedDtor();
}

void M3HapticDemoCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3HapticDemoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HapticDemoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HapticDemoCommand_descriptor_;
}

const M3HapticDemoCommand& M3HapticDemoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_haptic_5fdemo_2eproto();  return *default_instance_;
}

M3HapticDemoCommand* M3HapticDemoCommand::default_instance_ = NULL;

M3HapticDemoCommand* M3HapticDemoCommand::New() const {
  return new M3HapticDemoCommand;
}

void M3HapticDemoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HapticDemoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HapticDemoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HapticDemoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HapticDemoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HapticDemoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HapticDemoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HapticDemoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HapticDemoCommand::MergeFrom(const M3HapticDemoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HapticDemoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HapticDemoCommand::CopyFrom(const M3HapticDemoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HapticDemoCommand::IsInitialized() const {
  
  return true;
}

void M3HapticDemoCommand::Swap(M3HapticDemoCommand* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HapticDemoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HapticDemoCommand_descriptor_;
  metadata.reflection = M3HapticDemoCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
