os:
  - linux

language:
  - cpp

compiler:
  - gcc
  - clang

before_install:
  - sudo add-apt-repository --yes ppa:kalakris/cmake
  - sudo apt-get update -qq  # -qq No output except for errors

install:
  #-- Install opencv
  #- sudo apt-get install libopencv-dev
  - git clone https://github.com/Itseez/opencv.git
  - cd opencv
  - mkdir build
  - cd build
  - cmake .. -DBUILD_opencv_python2=OFF
  - make -j4
  - sudo make -j4 install
  - cd ../..
  #-- Install openni
  - sudo apt-get install git libusb-1.0-0-dev libudev-dev
  - sudo apt-get install openjdk-6-jdk  # if not using other java version
  - sudo apt-get install freeglut3-dev
  - git clone https://github.com/roboticslab-uc3m/OpenNI2.git  # Fork with working copy of Xtion Pro Live OpenNI2 driver.
  - cd OpenNI2 && make
  - sudo ln -s $PWD/Bin/x64-Release/libOpenNI2.so /usr/local/lib/
  - sudo ln -s $PWD/Bin/x64-Release/OpenNI2/ /usr/local/lib/
  - sudo ln -s $PWD/Include /usr/local/include/OpenNI2
  - sudo ldconfig
  - cd ..
  #-- Install nite
  - wget https://sourceforge.net/projects/roboticslab/files/External/nite/NiTE-Linux-x64-2.2.tar.bz2
  - tar xvf NiTE-Linux-x64-2.2.tar.bz2
  - sudo ln -s $PWD/NiTE-Linux-x64-2.2/Redist/libNiTE2.so /usr/local/lib/
  - sudo ln -s $PWD/NiTE-Linux-x64-2.2/Include /usr/local/include/NiTE-Linux-x64-2.2
  #-- Install cmake
  - sudo apt-get install cmake
  #-- Install yarp
  - sudo apt-get install libeigen3-dev  # Needed for creating YARP lib_math
  - git clone https://github.com/robotology/yarp
  - cd yarp && mkdir build && cd build
  - cmake .. -DSKIP_ACE=ON -DCREATE_LIB_MATH=ON -DCREATE_DEVICE_LIBRARY_MODULES=ON -DENABLE_yarpmod_OpenNI2DeviceServer=ON -DOPENNI2_INCLUDE_LOCAL=/usr/local/include/OpenNI2/ -DOPENNI2_LIBRARY=/usr/local/lib/libOpenNI2.so -DNITE2_INCLUDE_LOCAL=/usr/local/include/NiTE-Linux-x64-2.2 -DNITE2_LIBRARY=/usr/local/lib/libNiTE2.so -DYARP_USE_QT5=OFF
  - make
  - sudo make install
  - cd ../..
  #-- Install kdl
  - sudo apt-get install libeigen3-dev
  - git clone https://github.com/orocos/orocos_kinematics_dynamics.git
  - cd orocos_kinematics_dynamics/orocos_kdl && mkdir build && cd build
  - cmake ..
  - make
  - sudo make install
  - cd ../../..
  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - mkdir -p build && cd build

script:
  - cmake .. -DENABLE_coverage=ON
  - make
  - sudo make install

after_success:
  #  - cd ${TRAVIS_BUILD_DIR}
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info  '/usr/*' 'test/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  #- if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 --repo-token InWqFy6VWMrEUzr2Rn8XV0cGqv3wXWo2d coverage.info; fi
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi

  - sudo make uninstall

